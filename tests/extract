#!/usr/bin/env python3

def extract(
        quiet : bool = False,
        no_remove : bool = False,
):
    import zipfile
    import os
    import shutil
    import time
    from importlib.util import spec_from_loader, module_from_spec
    from importlib.machinery import SourceFileLoader 

    spec = spec_from_loader('compress', SourceFileLoader('compress', 'compress'))
    compress = module_from_spec(spec)
    spec.loader.exec_module(compress)
    
    if not os.path.exists(compress.zipname):
        raise FileNotFoundError(compress.zipname +". Please run ./compress first.")

    extracted_size = 0.
    extracted = []
    try:
        with zipfile.ZipFile(
                compress.zipname,
                mode = 'r',
                **compress.compression_kwargs
        ) as zfile:
            total = int(zfile.read(compress.size_identifier).decode('utf-8'))
            lines = zfile.read(compress.times_identifier).decode('utf-8').split('\n')
            times = {}
            for line in lines:
                if not line.strip(): continue
                _file, atime, mtime = line.split()
                times[_file] = (float(atime), float(mtime))
            
            for zinfo in zfile.infolist():
                if zinfo.filename in [
                        compress.size_identifier,
                        compress.times_identifier
                ]: continue
                zfile.extract(zinfo)
                os.utime(zinfo.filename, times = times[zinfo.filename])
                
                extracted += [zinfo.filename]
                extracted_size += os.path.getsize(zinfo.filename)
                if not quiet: compress.print_progress(extracted_size / total * 100)
            if not quiet: print()
    except:
        # If something goes wrong, remove the files we extracted
        directories = []
        for _file in extracted:
            dirname = os.path.dirname(_file)
            while os.sep in dirname:
                dirname = os.path.dirname(dirname)
            if dirname not in directories:
                directories += [dirname]

        for directory in directories:
            if os.path.isdir(directory): shutil.rmtree(directory)
            elif os.path.isfile(directory): os.remove(directory)
        
        raise

    # If nothing went wrong, remove the archive
    if not no_remove: os.remove(compress.zipname)

if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument('--quiet', action='store_true')
    parser.add_argument('--no-remove', action='store_true')
    args = parser.parse_args()
    
    extract(
        quiet = args.quiet,
        no_remove = args.no_remove,
    )
