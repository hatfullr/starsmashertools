#!/usr/bin/env python3
import zipfile

# Compresses the contents of all subdirectories in the current working directory

# We need the comments below to identify this part of the file in extract script
zipname = 'archive.zip'
size_identifier = 'uncompressed_size'
times_identifier = 'times'
compression_kwargs = {
    'compresslevel' : 9,
    'compression' : zipfile.ZIP_DEFLATED,
}



def get_gitignore_patterns(filename):
    import os
    import starsmashertools
    
    patterns = []
    with open(filename, 'r') as f:
        for line in f:
            if not line.strip(): continue # Skip empty lines
            if line.strip()[0] == '#': continue # Skip comments
            patterns += [line.strip()]
    # All patterns are relative to the source directory, not the current working
    # directory (just patterns which refer to directories, and so end with '/')
    for i, pattern in enumerate(patterns):
        if pattern.endswith('/'):
            patterns[i] = os.path.join(
                starsmashertools.SOURCE_DIRECTORY,
                pattern,
            )
    return patterns

def get_to_compress():
    import os
    import starsmashertools
    import fnmatch
    directory = os.getcwd()

    gitignore = os.path.join(
        starsmashertools.SOURCE_DIRECTORY,
        '.gitignore',
    )
    gitignore_patterns = []
    if os.path.isfile(gitignore):
        gitignore_patterns = get_gitignore_patterns(gitignore)

    # Only compress files that are in the directories of the current working
    # directory
    directories = []
    for name in os.listdir(directory):
        if os.path.isdir(name):
            path = os.path.join(directory, name)
            if path in directories: continue
            if not name.endswith(os.sep): name += os.sep
            for pattern in gitignore_patterns:
                if fnmatch.fnmatch(name, pattern): break
            else: # Doesn't match any gitignore pattern
                directories += [path]
    
    # Find all the files to compress
    files = []
    for directory in directories:
        for (dirpath, dirnames, filenames) in os.walk(directory):
            for filename in filenames:
                path = os.path.join(dirpath, filename)
                if path in files: continue
                for pattern in gitignore_patterns:
                    relpath = os.path.relpath(
                        path,
                        start = os.path.dirname(gitignore),
                    )
                    if fnmatch.fnmatch(relpath, pattern): break
                else:
                    files += [path]
    
    return files

def print_progress(progress):
    print('\r\033[K\rprogress = %5.1f%%' % progress, flush = True, end = '')


def compress(files, verbose):
    import zipfile
    import os
    import copy
    import shutil
    import datetime

    if os.path.exists(zipname):
        raise FileExistsError(zipname)

    cwd = os.path.realpath(os.getcwd())
    if not cwd.endswith(os.sep): cwd = cwd + os.sep

    def get_arcname(path):
        cwd = os.getcwd()
        if not path.startswith(cwd):
            raise Exception("Cannot work on a file not in the current working directory")
        arcname = path.replace(cwd,'')
        if arcname.startswith(os.sep): arcname = os.sep.join(arcname.split(os.sep)[1:])
        return arcname

    for i, _file in enumerate(files[:-1]):
        if _file in files[i+1:]:
            raise Exception("Duplicate file found: '%s'" % _file)


    to_remove = []
    for _file in files:
        arcname = get_arcname(_file)
        dirname = os.path.dirname(arcname)
        while os.sep in dirname:
            dirname = os.path.dirname(dirname)
        to_remove += [dirname]

    for t in to_remove:
        if not os.path.isdir(t):
            raise FileNotFoundError(t)

    times_string = []
    for _file in files:
        times_string += ["%s %f %f" % (
            get_arcname(_file),
            os.path.getatime(_file),
            os.path.getmtime(_file),
        )]
    times_string = '\n'.join(times_string)
        
    total = sum([os.path.getsize(_file) for _file in files])
    compressed = 0.
    try:
        with zipfile.ZipFile(
                zipname,
                mode = 'w',
                **compression_kwargs
        ) as zfile:
            zfile.writestr(size_identifier, str(total))
            zfile.writestr(times_identifier, times_string)
            if verbose: print_progress(0)
            for _file in files:
                zfile.write(
                    _file,
                    arcname = get_arcname(_file),
                )
                compressed += os.path.getsize(_file)
                if verbose: print_progress(compressed / total * 100)
        if verbose: print()
        # Double check to make sure the zip file does indeed exist
        if not os.path.exists(zipname): raise FileNotFoundError(zipname)
    except:
        # If we fail for any reason, remove the zip file we created (it is
        # probably corrupted now) and raise the error.
        if os.path.exists(zipname): os.remove(zipname)
        raise
    
    # After completing successfully, remove the zipped files
    for t in to_remove:
        if os.path.isdir(t): shutil.rmtree(t)
        elif os.path.isfile(t): os.remove(t)


if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument('--quiet', action='store_true')
    args = parser.parse_args()
    
    files = get_to_compress()
    compress(files, not args.quiet)
    
