#!/usr/bin/env python3
import argparse
import os
import re
import sys
import starsmashertools.helpers.apidecorator
import starsmashertools.helpers.string
import starsmashertools.helpers.jsonfile
import numpy
import inspect
import importlib
import types
import copy
import hashlib
import starsmashertools
import importlib

version_line_regex = "[vV][eE][rR][sS][iI][oO][nN]\\s*[=]\\s*[\"']\\d*[.]\\d*[.]\\d*[\"']"

SOURCE_DIRECTORY = os.path.dirname(os.path.dirname(inspect.getsourcefile(starsmashertools)))

# Obtain the version number from __init__.py

version_data_filename = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'version_data.json.zip')

parser = argparse.ArgumentParser(
    prog = 'increment_version',
    formatter_class = argparse.RawDescriptionHelpFormatter,
    description = """Increment the package version number using Semantic Versioning. From https://semver.org/:

   Given a version number MAJOR.MINOR.PATCH, increment the:
     1. MAJOR version when you make incompatible API changes
     2. MINOR version when you add functionality in a backward compatible manner
     3. PATCH version when you make backward compatible bug fixes

If the MAJOR version is incremented then the MINOR version is set to 0. If the
MINOR version is changed then the PATCH version is set to 0.

Whenever this program is run we collect data on functions that have the
"@api" decorator and compare the data to that which we last archived. We
increment the MAJOR version whenever any of the following are true:
  
  - A function name was changed or the function doesn't exist anymore in the new
    data.
  - Something about a function's positional arguments changed, including their
    order, names, and types. Types must be indicated using type hinting. When
    the types are different, only a removal of a type counts.
  - The new version of a function is missing keyword arguments that the old
    version contains, any of the keyword arguments have different types as given
    by the type hinting.

If the MAJOR version is to be incremented then we do not check if the MINOR or
PATCH versions should be incremented.

To detect added functionality that is backward compatible for the MINOR version
increments, we check if any of the following are true:

  - A function name in the new data isn't present in the old data (it was added
    in the new version).
  - A keyword argument was added to a function.
  - A keyword argument for a function in the new version has a different default
    value compared to the old version.
  - A keyword argument for a function in the new version accepts a type that it
    previously did not accept.
  - A positional argument has gained a new type it didn't have before.

If neither the MAJOR nor MINOR versions were incremented, then we increment the
PATCH version."""
)

parser.add_argument(
    '-y',
    action='store_true',
    default=False,
    required=False,
    help="Automatically respond 'y' to a prompt to increment the version number.",
)

empty_value = "-None"


def get_parameter_details(parameter):
    default = parameter.default
    if default is inspect.Parameter.empty:
        default = empty_value
    annotation = parameter.annotation

    if annotation is inspect.Parameter.empty:
        annotation = empty_value
    elif not isinstance(annotation, types.UnionType) and hasattr(annotation, "__name__"):
        if str(annotation.__module__) == 'builtins':
            annotation = annotation.__name__
        else:
            annotation = str(annotation.__module__) + "." + annotation.__name__
    return parameter.name, parameter.kind, default, annotation

def get_files():
    ret = []
    for dirpath, dirnames, filenames in os.walk(os.path.join(SOURCE_DIRECTORY, 'starsmashertools')):
        for filename in filenames:
            if filename.endswith('.py'):
                ret += [os.path.join(dirpath, filename)]
    return ret

def get_file_hashes():
    hashes = {}
    files = get_files()
    for _file in files:
        with open(_file, 'rb') as f:
            # We need to use usedforsecurity=True because we need the
            # cryptographic hashing for checking differences in code
            hashes[_file] = hashlib.sha256(f.read(), usedforsecurity=True).hexdigest()
    return hashes

def to_json(data, version):
    obj = {}
    for key, parameters in data.items():
        obj[key] = []
        for parameter in parameters:
            name, kind, default, annotation = get_parameter_details(parameter)
            obj[key] += [{
                'name' : name,
                'kind' : kind,
                'default' : default,
                'annotation' : str(annotation),
                'annotation is UnionType' : isinstance(annotation, types.UnionType),
            }]
    obj['version'] = version
    obj['hashes'] = get_file_hashes()
    
    return obj

def from_json(obj):
    previous_hashes = None
    previous_version = None
    data = {}
    for key, param_objs in obj.items():
        if key == 'version':
            previous_version = param_objs
            continue
        if key == 'hashes':
            previous_hashes = param_objs
            continue
        data[key] = []
        for param_obj in param_objs:
            name = param_obj['name']
            kind = param_obj['kind']
            default = param_obj['default']
            annotation = param_obj['annotation']

            if default == empty_value:
                default = inspect.Parameter.empty

            if annotation == empty_value:
                annotation = inspect.Parameter.empty
            else:
                annotation = eval(annotation)

            if inspect.Parameter.empty not in [default, annotation]:
                if not isinstance(annotation, types.UnionType):
                    default = annotation(default)
            
            data[key] += [inspect.Parameter(name, kind, default=default, annotation=annotation)]
    return data, previous_version, previous_hashes
    
def save_data(data, version):
    tosave = to_json(data, version)
    starsmashertools.helpers.jsonfile.save(version_data_filename, tosave)
    
def load_data():
    return from_json(starsmashertools.helpers.jsonfile.load(version_data_filename))

def isParameterEqual(parameter, other):
    return get_param_difference_reason(parameter, other) is None

def get_param_difference_reason(parameter, other):
    details1 = get_parameter_details(parameter)
    details2 = get_parameter_details(other)
    for det1, det2, name in zip(details1, details2, ['name','kind','default','annotation']):
        if det1 != det2: return name
    return None

def isDataChanged(data_before, data_after):
    for key, params in data_before.items():
        if key not in data_after.keys(): return True
        if len(params) != len(data_after[key]): return True
        for p, other in zip(params, data_after[key]):
            if not isParameterEqual(p, other): return True
    for key in data_after.keys():
        if key not in data_before.keys(): return True
    return False

def isHashesChanged(previous_hashes, current_hashes):
    for _file, _hash in current_hashes.items():
        if _file not in previous_hashes.keys(): return True
        if _hash != previous_hashes[_file]: return True

    for _file in previous_hashes.keys():
        if _file not in current_hashes.keys(): return True
    return False

# Insert the contents of dict1 into dict2, creating a list where necessary
def combine_dict(dict1, dict2):
    ret = copy.deepcopy(dict2)
    for key, val in dict1.items():
        if key not in ret.keys(): ret[key] = val
        else:
            if isinstance(ret[key], list):
                if isinstance(val, list): ret[key] += val
                else: ret[key] += [val]
            else: ret[key] = val
    return ret

def get_types_from_annotation(annotation):
    if isinstance(annotation, types.UnionType):
        return annotation.__args__
    return [annotation]


class Change(object):
    def __init__(self, function_name, message):
        self.function_name = function_name
        self.message = message
    def __str__(self): return "'%s' %s" % (self.function_name, self.message)
    def __repr__(self, *args, **kwargs): return self.__str__(*args, **kwargs)
class MajorChange(Change, object): pass
class MinorChange(Change, object): pass


class AnnotationType(object):
    def __init__(self, annotation):
        if isinstance(annotation, str):
            annotation = AnnotationType.get_type_from_string(annotation)
        if isinstance(annotation, types.UnionType):
            self.types = annotation.__args__
        elif isinstance(annotation, type):
            self.types = [annotation]
        else: raise TypeError(annotation)

    @staticmethod
    def get_type_from_string(string):
        s = string.split(".")
        module_path = ".".join(s[:-1])
        for _path, mod in sys.modules.items():
            if _path == module_path:
                return getattr(mod, s[-1])
        raise Exception("Failed to find module for '%s'" % string)

    def __str__(self):
        return " | ".join([t.__name__ for t in self.types])
    def __repr__(self,*args,**kwargs): return self.__str__(*args, **kwargs)
    
    def __eq__(self, other):
        if not isinstance(other, AnnotationType): raise TypeError(other)
        if len(self.types) != len(other.types): return False
        for t in self.types:
            if t not in other.types: return False
        for t in other.types:
            if t not in self.types: return False
        return True

    def __contains__(self, other):
        if isinstance(other, AnnotationType):
            for t in other.types:
                if t not in self.types: return False
            return True
        elif isinstance(other, type):
            return other in self.types
        raise TypeError(other)
            
        
class Function(object):
    def __init__(self, name, parameters):
        self.name = name
        self.parameters = parameters

    def get_positionals(self):
        _types = [
            inspect.Parameter.POSITIONAL_ONLY,
            inspect.Parameter.POSITIONAL_OR_KEYWORD,
        ]
        return [p for p in self.parameters if p.kind in _types]

    def get_keywords(self):
        return [p for p in self.parameters if p.kind == inspect.Parameter.KEYWORD_ONLY]

    def get_args_index(self):
        for i, p in enumerate(self.parameters):
            if p.kind == inspect.Parameter.VAR_POSITIONAL: return i
        return -1

    def get_kwargs_index(self):
        for i, p in enumerate(self.parameters):
            if p.kind == inspect.Parameter.VAR_KEYWORD: return i
        return -1

    def compare_positionals(self, other):
        """
        Return a list of changes regarding the positional arguments compared to
        the positional arguments in 'other'. self is considered the 'newer'
        function.
        
        There are 2 types of positional arguments: POSITIONAL_ONLY and
        POSITIONAL_OR_KEYWORD. We write the comparisons below as "previous vs
        current".

           POSITIONAL_ONLY vs. POSITIONAL_ONLY
              Major:
                 - One or more types in previous are no longer included in
                   current
              Minor:
                 - Different names
                 - One or more types in current are not included in previous

           POSITIONAL_ONLY vs. POSITIONAL_OR_KEYWORD
              Major:
                 - One or more types in previous are no longer included in
                   current
              Minor:
                 - Different names
                 - One or more types in current are not included in previous

           POSITIONAL_OR_KEYWORD vs. POSITIONAL_ONLY
              Major:
                 - Automatic

           POSITIONAL_OR_KEYWORD vs. POSITIONAL_OR_KEYWORD
              Major:
                 - Different names
                 - One or more types in previous are no longer included in
                   current
              Minor:
                 - One or more types in current are not included in previous
        """
        if not isinstance(other, Function): raise TypeError(other)

        changes = []
        
        new_positionals = self.get_positionals()
        old_positionals = other.get_positionals()

        new_positional_only = [p for p in new_positionals if p.kind == inspect.Parameter.POSITIONAL_ONLY]
        old_positional_only = [p for p in old_positionals if p.kind == inspect.Parameter.POSITIONAL_ONLY]

        if len(new_positional_only) != len(old_positional_only):
            idx1 = self.get_args_index()
            idx2 = other.get_args_index()
            if idx1 == -1 and idx2 == -1: # No *args argument present in either
                changes += [MajorChange(self.name, "used to accept %d POSITIONAL_ONLY arguments but now accepts %d positional arguments" % (len(old_positional_only), len(new_positional_only)))]
        
        new_pos_or_kw = [p for p in new_positionals if p.kind == inspect.Parameter.POSITIONAL_OR_KEYWORD]
        old_pos_or_kw = [p for p in old_positionals if p.kind == inspect.Parameter.POSITIONAL_OR_KEYWORD]
            
        if len(new_pos_or_kw) > len(old_pos_or_kw):
            changes += [MinorChange(self.name, "used to accept %d POSITIONAL_OR_KEYWORD arguments and now accepts %d POSITIONAL_OR_KEYWORD arguments" % (len(old_pos_or_kw), len(new_pos_or_kw)))]
        
        for new_p, old_p in zip(new_positionals, old_positionals):
            new_type = AnnotationType(new_p.annotation)
            old_type = AnnotationType(old_p.annotation)
            if old_type not in new_type:
                changes += [MajorChange(self.name, "positional argument '%s' of type '%s' changed to incompatible type '%s'" % (old_p.name, str(old_type), str(new_type)))]

            if (new_p.kind == inspect.Parameter.POSITIONAL_ONLY and
                old_p.kind == inspect.Parameter.POSITIONAL_ONLY):
                if new_p.name != old_p.name:
                    changes += [MinorChange(self.name, "POSITIONAL_ONLY argument changed names from '%s' to '%s'" % (old_p.name, new_p.name))]
                if new_type not in old_type:
                    changes += [MinorChange(self.name, "POSITIONAL_ONLY argument '%s' changed types from '%s' to '%s'" % (new_p.name, str(old_type), str(new_type)))]

            if (new_p.kind == inspect.Parameter.POSITIONAL_OR_KEYWORD and
                old_p.kind == inspect.Parameter.POSITIONAL_ONLY):
                if new_p.name != old_p.name:
                    changes += [MinorChange(self.name, "argument changed names from '%s' to '%s'" % (old_p.name, new_p.name))]
                if new_type not in old_type:
                    changes += [MinorChange(self.name, "argument '%s' changed types from '%s' to '%s'" % (new_p.name, str(old_type), str(new_type)))]

            if (new_p.kind == inspect.Parameter.POSITIONAL_OR_KEYWORD and
                old_p.kind == inspect.Parameter.POSITIONAL_OR_KEYWORD):
                if new_p.name != old_p.name:
                    changes += [MajorChange(self.name, "POSITIONAL_OR_KEYWORD argument with name '%s' changed to new name '%s'" % (old_p.name, new_p.name))]
                else:
                    if new_type not in old_type:
                        changes += [MinorChange(self.name, "argument '%s' type changed from '%s' to '%s'" % (new_p.name, str(old_type), str(new_type)))]

            if (new_p.kind == inspect.Parameter.POSITIONAL_ONLY and
                old_p.kind == inspect.Parameter.POSITIONAL_OR_KEYWORD):
                changes += [MajorChange(self.name, "POSITIONAL_OR_KEYWORD argument '%s' became a POSITIONAL_ONLY argument" % old_p.name)]

        return changes

    def compare_keywords(self, other):
        """
        The hard work is already handled for us in compare_positionals. Now we
        only need to compare KEYWORD_ONLY and VAR_KEYWORD arguments.
        """
        if not isinstance(other, Function): raise TypeError(other)
        changes = []

        new_keywords = self.get_keywords()
        old_keywords = other.get_keywords()

        if len(new_keywords) < len(old_keywords):
            idx1 = self.get_kwargs_index()
            idx2 = other.get_kwargs_index()
            if idx1 == -1 and idx2 == -1:
                changes += [MajorChange(self.name, "used to accept %d keyword arguments but now accepts %d keyword arguments" % (len(old_keywords), len(new_keywords)))]
        elif len(new_keywords) > len(old_keywords):
            changes += [MinorChange(self.name, "used to accept %d keyword arguments and now accepts %d keyword arguments" % (len(old_keywords), len(new_keywords)))]

        names1 = [k.name for k in new_keywords]
        names2 = [k.name for k in old_keywords]
        for old_k in old_keywords:
            if old_k.name not in names1:
                changes += [MinorChange(self.name, "gained keyword argument '%s'" % old_k.name)]
            else:
                new_type = AnnotationType(new_keywords[names1.index(old_k.name)].annotation)
                old_type = AnnotationType(old_k.annotation)
                if old_type not in new_type:
                    changes += [MajorChange(self.name, "keyword argument '%s' of type '%s' changed to incompatible type '%s'" % (old_k.name, str(old_type), str(new_type)))]
                elif new_type not in old_type:
                    changes += [MinorChange(self.name, "keyword argument '%s' of type '%s' changed to compatible type '%s'" % (old_k.name, str(old_type), str(new_type)))]
                
        for new_k in new_keywords:
            if new_k.name not in names2:
                changes += [MajorChange(self.name, "lost keyword argument '%s' or its name changed" % new_k.name)]
        return changes
            

    

def detect_function_name_changes(previous, current):
    changes = []
    for func_name in previous.keys():
        if func_name not in current.keys():
            changes += [MajorChange(func_name, "isn't a member of the API anymore")]
    for func_name in current.keys():
        if func_name not in previous.keys():
            changes += [MinorChange(func_name, "was added to the API")]
    return changes



def detect_changes(previous, current):
    # A function name was changed or the function doesn't exist anymore in the
    # new data.
    changes = detect_function_name_changes(previous, current)
    
    # Don't check these functions for other changes. The functions we found were
    # ones which were either removed, added, or changed name. Thus we can't
    # match them by their names in future methods.
    for change in changes:
        key = change.function_name
        if key in previous.keys(): del previous[key]
        if key in current.keys(): del current[key]

    for func_name, new_parameters in current.items():
        old_parameters = previous[func_name]
        
        new_function = Function(func_name, new_parameters)
        old_function = Function(func_name, old_parameters)

        changes += new_function.compare_positionals(old_function)
        changes += new_function.compare_keywords(old_function)

    return changes




def increment(which : str, previous_version : str, current_data):
    """
    Increment the version number

    Parameters
    ----------
    which : str
        One of 'major', 'minor', or 'patch'.
    """
    
    if which not in ['major', 'minor', 'patch']:
        raise ValueError("Argument 'which' must be one of 'major', 'minor', or 'patch', not '%s'" % str(which))
    
    major, minor, patch = previous_version.split('.')
    major = int(major)
    minor = int(minor)
    patch = int(patch)
    if which == 'major':
        major += 1
        minor = 0
        patch = 0
    elif which == 'minor':
        minor += 1
        patch = 0
    else:
        patch += 1

    new_version = ".".join([str(i) for i in [major, minor, patch]])
    
    # Change the pyproject.toml file
    curdir = os.path.dirname(__file__)
    filename = os.path.join(SOURCE_DIRECTORY, "pyproject.toml")
    with open(filename, 'r') as f:
        contents = f.read()

    contents = re.sub(version_line_regex, "version = '%s'" % new_version,  contents, count=1)
    if args.y or input("Increment version from '%s' to '%s'? (y/n; default = y): " % (previous_version, new_version)).lower() in ['', 'y']:
        with open(filename, 'w') as f:
            f.write(contents)

        save_data(current_data, new_version)
        print("Incremented version from '%s' to '%s'" % (previous_version, new_version))
        
def get_data():
    import inspect
    import importlib
    
    decorators = starsmashertools._get_decorators()
    function = starsmashertools.helpers.apidecorator.api
    func_name = '%s.%s' % (function.__module__, function.__qualname__)
    data = {}
    for obj in decorators.get(func_name, []):
        module_name = obj['module']
        full_name = obj['full name']
        module = importlib.import_module(module_name)
        if obj['class'] is not None:
            f = None
            for _class in obj['class'].split('.'):
                if f is None: f = getattr(module, _class)
                else: f = getattr(f, _class)
            if f is None:
                f = getattr(getattr(module, obj['class']), obj['short name'])
            else: f = getattr(f, obj['short name'])
        else:
            f = getattr(module, obj['short name'])
        data[full_name] = inspect.signature(f).parameters.values()
        del module
    return data


args = parser.parse_args()

current_data = get_data()

if not os.path.isfile(version_data_filename):
    save_data(current_data, starsmashertools.__version__)
    raise FileNotFoundError("Cannot increment the version number because there was no version data present at '%s', but it has now been created and you can safely run this program again after the next changes are made to the code." % version_data_filename)

previous_data, previous_version, previous_hashes = load_data()
current_hashes = get_file_hashes()

changed = (isDataChanged(previous_data, current_data) or
           isHashesChanged(previous_hashes, current_hashes))

if not changed:
    raise Exception("The code has not changed since the version number was last incremented.")

changes = detect_changes(previous_data, current_data)
major_changes = []
minor_changes = []
for change in changes:
    if isinstance(change, MajorChange): major_changes += [str(change)]
    else: minor_changes += [str(change)]

print("Detected major changes:\n   " + "\n   ".join(major_changes)+"\n")
print("Detected minor changes:\n   " + "\n   ".join(minor_changes)+"\n")

if major_changes: increment('major', previous_version, current_data)
elif minor_changes: increment('minor', previous_version, current_data)
else: increment('patch', previous_version, current_data)
