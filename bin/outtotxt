#!/usr/bin/env python3

import starsmashertools
import starsmashertools.lib.output
import argparse
import os
import warnings
import copy
import numpy as np

# Obtain the available format sheets
root = os.path.dirname(os.path.dirname(starsmashertools.__file__))
sheets_dir = os.path.join(root, 'format_sheets')
if not os.path.isdir(sheets_dir):
    raise Exception("Failed to find directory '%s'. Check if your installation has been corrupted." % sheets_dir)

formats = {}
for filename in os.listdir(sheets_dir):
    if filename.endswith('.format'):
        formats[filename.replace('.format','')] = os.path.join(sheets_dir, filename)

# Set default values
#_format = formats['default']
#outputpattern = "out%s.txt"


# Create the argument parser
parser = argparse.ArgumentParser(
    prog = "outtotxt",
    description = "A tool for creating a human-readable out*.sph file.",
)
parser.add_argument(
    '-format',
    nargs='?',
    type=str,
    required=False,
    default=formats['default'],
    help="The format file to use. You can specify either a file path or a name, e.g. 'default', which corresponds with in %s." % os.path.join(sheets_dir,'defaults.format'),
)
parser.add_argument(
    '-o',
    nargs='?',
    type=str,
    required=False,
    default="out{num:04d}.txt",
    help="The format to produce output files with. The format should be given as a pythonic format string, such as 'out{num:04d}.txt'. Here 'num' is a string which equals the integer value of the number in the output file name. For example, num=10 for 'out0010.sph'.",
)
parser.add_argument(
    '-odir',
    nargs='?',
    type=str,
    required=False,
    default='.',
    help="The directory in which to store the created output files. If this option is not specified then the output files will be stored in the current working directory.",
)
parser.add_argument(
    '--overwrite',
    action='store_true',
    help="If specified then pre-existing *.txt files whose names match that of an output file will be overwritten. Otherwise they will be skipped."
)
parser.add_argument(
    'filenames',
    nargs='+',
    type=str,
    help="The files to convert into text format.",
)



# Get the arguments
args = parser.parse_args()
_format = args.format
if not os.path.isfile(_format):
    # Check the sheets_dir
    _f = args.format
    if not _format.endswith('.format'): _format += '.format'
    _format = os.path.join(sheets_dir, _format)
    if not os.path.isfile(_format):
        raise FileNotFoundError(_format)
outputpattern = args.o
outputdirectory = args.odir
overwrite = args.overwrite
filenames = args.filenames






# Returns the header block, body block, and how many newlines are between them
def read_format(filename):
    # Read in the format sheet
    listen_header = False
    listen_body = False
    header = []
    body = []
    newlines_between = 0
    with open(filename, 'r') as f:
        for line in f:
            # Skip empty lines
            if len(line.strip()) == 0: continue
            # Skip comment lines
            if line.strip()[0] == '#': continue

            if line.startswith("NEWLINE"):
                newlines_between += 1

            if listen_header:
                if line.startswith('END HEADER'): listen_header = False
                else: header += [line.replace("\n","")]
                continue
            elif line.startswith('BEGIN HEADER'):
                listen_header = True
                continue

            if listen_body:
                if line.startswith('END BODY'): break
                else: body += [line.replace("\n","")]
                continue
            elif line.startswith('BEGIN BODY'):
                listen_body = True
                continue

    def find_indices(string, char):
        return [i for i, ltr in enumerate(string) if ltr == char]

    # Check for aligned | characters
    indices = None
    for line in header:
        if not line.startswith('|'):
            raise Exception("Every line must begin with a '|' character in the HEADER block")
        if not line.endswith('|'):
            raise Exception("Every line must end with a '|' character in the HEADER block")
        if indices is None:
            indices = find_indices(line, "|")
        else:
            if indices != find_indices(line, "|"):
                raise Exception("Misaligned '|' characters in HEADER")
    indices = None
    for line in body:
        if not line.startswith('|'):
            raise Exception("Every line must begin with a '|' character in the BODY block")
        if not line.endswith('|'):
            raise Exception("Every line must end with a '|' character in the BODY block")
        if indices is None:
            indices = find_indices(line, "|")
        else:
            if indices != find_indices(line, "|"):
                raise Exception("Misaligned '|' characters in BODY")


    return header, body, newlines_between


def get_iterators(filenames):
    # Get the iterators
    dirnames = [os.path.dirname(filename) for filename in filenames]
    unique_dirnames = list(set(dirnames))
    iterators = []
    for dirname in unique_dirnames:
        simulation = starsmashertools.get_simulation(dirname)
        fnames = [filename for filename in filenames if dirname in filename]
        iterators += [starsmashertools.lib.output.OutputIterator(fnames, simulation)]
    return iterators


def parse_line(line):
    return line.strip().split("|")[1:-1]





def parse_block(simulation, sample, block):
    formats = parse_line(block[0])
    values = parse_line(block[-1])
    orig_values = copy.copy(values)

    # Find values that correspond to units
    for i, (f, v) in enumerate(zip(formats, values)):
        f = f.strip()
        v = v.strip()
        if len(v) == 0:
            values[i] = " "*len(f.format(1))
            continue
        if v.startswith('{u:'):
            val = getattr(simulation.units, v[3:-1])
            values[i] = f.format(val)
        else:
            f = f[1:-1]
            values[i] = v[:-1] + f + v[-1]

    # Figure out what the column lengths are going to be
    d = {}
    for v in orig_values:
        v = v.strip()
        if len(v) == 0: continue
        if v.startswith('{u:'): continue
        key = v.strip()[1:-1]
        s = sample[key]
        if isinstance(s, np.ndarray):
            d[key] = s[0]
        else:
            d[key] = s

    required_keys = list(d.keys())
    
    column_lengths = []
    for v in values:
        column_lengths += [len(v.format(**d))]
    
    middle = []
    for i in range(2, len(block)-1):
        fmt = ""
        for c in column_lengths:
            fmt += "{:>"+str(c)+"s}"
        middle += [fmt.format(*[l.strip() for l in parse_line(block[i])])]

    # Format everything to be the same column lengths
    string = "\n".join(middle) + "\n"
    string += "".join(values)+"\n"
    
    _locals = {}
    for attr in dir(simulation.units):
        _locals[attr] = getattr(simulation.units, attr)
    
    unit_conversions = parse_line(block[1])
    for i, u in enumerate(unit_conversions):
        if len(u.strip()) == 0:
            unit_conversions[i] = 1
            continue
        unit_conversions[i] = eval(u, {}, _locals)
    
    return string, unit_conversions, required_keys

        


# Return a single python format string
def parse_format(simulation, sample, header, body):
    header_string, header_unit_conversions, required_header_keys = parse_block(simulation, sample, header)
    body_string, body_unit_conversions, required_body_keys = parse_block(simulation, sample, body)
    return header_string, body_string, header_unit_conversions, body_unit_conversions, required_header_keys, required_body_keys

# Return a single string with output in it
def create_output(
        output,
        savefile,
        header_format_string,
        header_required_keys,
        body_format_string,
        body_required_keys,
        header_unit_conversions,
        body_unit_conversions,
        newlines_between,
):
    d = {}
    for key, unit_conversion in zip(header_required_keys, header_unit_conversions):
        d[key] = output[key] * unit_conversion
    string = header_format_string.format(**d)

    string += "\n"*newlines_between

    d = {}
    for key, unit_conversion in zip(body_required_keys, body_unit_conversions):
        d[key] = output[key] * unit_conversion

    string += "\n".join(body_format_string.split("\n")[:-2]) + "\n"

    body_line_format = body_format_string.split("\n")[-2]
    keys = d.keys()
    lines = [{key:val[i] for key, val in d.items()} for i in range(output['ntot'])]
    for line in lines:
        line = body_line_format.format(**line)
        string += line + "\n"

    with open(savefile, 'w') as f:
        f.write(string)
    


# Get all the save names first
savenames = {}
skip_files = []
for filename in filenames:
    savename = os.path.basename(filename)
    try:
        num = int(savename.replace("out","").replace(".sph",""))
    except Exception as e:
        raise Exception("Invalid output file name '%s'" % filename) from e
    savename = outputpattern.format(num=num)
    savefile = os.path.join(outputdirectory, savename)

    if os.path.isfile(savefile) and not overwrite:
        skip_files += [savefile]
        continue

    savenames[filename] = savefile
        

if skip_files:
    string = "Skipping files:\n"
    string += "\n".join(skip_files)
    warnings.warn(string)



header, body, newlines_between = read_format(_format)

iterators = get_iterators(savenames.keys())
for iterator in iterators:
    sample = starsmashertools.lib.output.Output(iterator.filenames[0], simulation = iterator.simulation)
    # Instantiate the sample
    sample.read()
    header_format_string, body_format_string, header_unit_conversions, body_unit_conversions, required_header_keys, required_body_keys = parse_format(iterator.simulation, sample, header, body)
    for output in iterator:
        print(output.path)
        output.mode = 'cgs'
        create_output(
            output,
            savenames[output.path],
            header_format_string,
            required_header_keys,
            body_format_string,
            required_body_keys,
            header_unit_conversions,
            body_unit_conversions,
            newlines_between,
        )

