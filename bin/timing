#!/usr/bin/env python3

# This program is used to measure how much time a StarSmasher simulation took to
# run. It uses os.getmtime to measure timings.

import starsmashertools
import starsmashertools.preferences
import starsmashertools.helpers.path
import starsmashertools.bintools.cli
import starsmashertools.bintools
import starsmashertools.helpers.path
import collections
import os
import numpy as np
import warnings
import copy

################################################################################
################################## Back end ####################################
################################################################################

MIN_PLOT_APPARENT_SIZE = (0.25, 0.25)

# Gets set in the front end
simulation = None
cli = None


def linear_fit(x, y):
    with warnings.catch_warnings():
        warnings.simplefilter('ignore')
        slope = np.mean(np.diff(y) / np.diff(x))
    b = y[0] - slope * x[0]
    return lambda x: slope * x + b

def get_time_table():
    global cli

    if len(cli.simulations) != 1:
        raise Exception("Exactly 1 simulation is required")

    simulation = cli.simulations[0]
    
    logcolumn = []
    outcolumn = []
    totalcolumn = []
    fraccolumn = []

    fmt = "%10s:   %s ... %s"
    filenames = simulation.get_outputfiles()
    longest = -float('inf')
    summed = 0
    for logfile in simulation.get_logfiles():
        logcolumn += [starsmashertools.helpers.path.basename(logfile.path)]

        has = logfile.has_output_files(filenames)
        first = None
        for i, h in enumerate(has):
            if h:
                first = filenames[i]
                break
        last = None
        for i, h in enumerate(has[::-1]):
            if h:
                last = filenames[len(filenames) - i - 1]
                break

        if first is None and last is None:
            totalcolumn += [0]
            continue

        fmt2 = '%s ... %s'
        if None in [first, last]:
            fmt2 = '%s'
        
        outcolumn += ["%s ... %s" % (
            starsmashertools.helpers.path.basename(first),
            starsmashertools.helpers.path.basename(last),
        )]
        t1 = first.get_file_creation_time()
        t2 = last.get_file_creation_time()
        totalcolumn += [t2-t1]
        longest = max(longest, t2-t1)
        summed += t2-t1
        
    fraccolumn = [c / summed for c in totalcolumn]

    labels = [
        'Log File',
        'Output Files',
        'Fraction',
        'Total Time',
    ]
    unit = 1.
    if longest > -float('inf'):
        try_units = collections.OrderedDict()
        try_units['s'] = 1.
        try_units['min'] = 60.
        try_units['hr'] = 3600.
        try_units['day'] = 3600. * 24.

        for key, val in try_units.items():
            if longest / val <= 100:
                labels[-1] += ' (' + key + ')'
                totalcolumn = [c / val for c in totalcolumn]
                break

    if '(' not in labels[-1]: labels[-1] += ' (s)'
    
    fraccolumn = ['%7.5f' % c for c in fraccolumn]

    logcolumn += ['']
    outcolumn += ['']
    fraccolumn += ['']
    totalcolumn += [sum([c for c in totalcolumn])]
    
    
    labels = [starsmashertools.bintools.Style.bold(label) for label in labels]
    totalcolumn = ['%13.10f' % c for c in totalcolumn]
    
    return [logcolumn, outcolumn, fraccolumn, totalcolumn], labels

def plot_wall_time(default_savename, yaxis, absolute=False):
    global cli
    import matplotlib.pyplot as plt
    import matplotlib.transforms
    import matplotlib.dates
    import datetime

    fig, ax = plt.subplots()
    ax.xaxis.grid(True, alpha=0.2)
    ax.margins(0, 0)
    if len(cli.simulations) == 1:
        fig.autofmt_xdate() # Make pretty tick labels
        xfmt = matplotlib.dates.DateFormatter('%Y-%m-%d')
        ax.xaxis.set_major_formatter(xfmt)
    
    if yaxis == 'iterations': ylabel = 'log10(iterations)'
    elif yaxis == 'simulation': ylabel = 'simulation time'

    xs = []
    ys = []
    max_simulation_end_time = None
    max_simulation_time = -np.inf
    xmax = -np.inf
    xmin = np.inf
    units = None
    for simulation in cli.simulations:
        if units is None: units = simulation.units
        elif units != simulation.units:
            if yaxis == 'simulation': raise Exception("Units mismatch")
            warnings.warn("Units mismatch")

        if max_simulation_end_time is None:
            max_simulation_end_time = simulation['tf']
        else: max_simulation_end_time = max(max_simulation_end_time, simulation['tf'])
            
        simulation_times = []
        wall_times = []
        iterations = []
        cli.write("Reading output file headers in '%s'" % simulation.directory)
        for key, val in simulation.get_output_headers(verbose=False).items():
            simulation_times += [val['t']]
            wall_times += [key.get_file_creation_time()]
            iterations += [val['nit']]

        max_simulation_time = max(max_simulation_time, max(simulation_times))
        xmax = max(xmax, max(wall_times))
        xmin = min(xmin, min(wall_times))

        if len(cli.simulations) == 1:
            dates = [datetime.datetime.fromtimestamp(time) for time in wall_times]
            wall_times = matplotlib.dates.date2num(dates)

        xs += [wall_times]
        if yaxis == 'iterations': ys += [iterations]
        elif yaxis == 'simulation': ys += [simulation_times]
        
    u = units['t']
    yfactor = float(u)
    if yaxis == 'simulation':
        u *= max_simulation_end_time
        auto = u.auto()
        yfactor *= u.get_conversion_factor(auto.label)
        ylabel += ' [%s]' % auto.label
    
    if len(cli.simulations) > 1:
        xmax = -np.inf
        for i, x in enumerate(xs):
            xs[i] = np.asarray(x) - np.amin(x) #xmin
            xmax = max(xmax, np.amax(xs[i]))
        xunit = starsmashertools.lib.units.Unit(xmax, 's')
        auto = xunit.auto()
        xfactor = xunit.get_conversion_factor(auto.label)
        ax.set_xlabel('wall time [%s]' % auto.label)
    
    data_xmin, data_xmax = np.inf, -np.inf
    data_ymin, data_ymax = np.inf, -np.inf
    for simulation, x, y in zip(cli.simulations, xs, ys):
        y = np.asarray(y, dtype=float)
        if yaxis == 'simulation': y *= yfactor
        elif yaxis == 'iterations': y = np.log10(y)
        
        if len(cli.simulations) > 1: x *= xfactor
        
        data_xmin = min(data_xmin, min(x))
        data_xmax = max(data_xmax, max(x))
        data_ymin = min(data_ymin, min(y))
        data_ymax = max(data_ymax, max(y))
        p = ax.plot(x, y, label=starsmashertools.helpers.string.shorten(os.path.basename(simulation.directory), 30))[0]

        if yaxis == 'simulation':
            n = int(0.5*len(y))
            f = linear_fit(y[-n:], x[-n:])
            y1, y2 = y[-n], max_simulation_end_time * yfactor
            x1, x2 = f(y1), f(y2)
            ax.plot([x1,x2], [y1, y2], color=p.get_color(), linestyle='--', lw=0.5)
    
        
    if yaxis == 'simulation':
        ax.set_ylim(None, max_simulation_end_time * yfactor)
        
    ax.set_ylabel(ylabel)
    ax.legend()
    
    plt.tight_layout()


    # Don't display such a large time range that the data cannot be seen
    # clearly. Make sure the data spans at least some fraction of the axes
    fig.canvas.draw()

    xlim = list(ax.get_xlim())
    ylim = list(ax.get_ylim())
    
    bbox = matplotlib.transforms.Bbox(
        [[data_xmin, data_ymin], [data_xmax, data_ymax]],
    )
    bbox = bbox.transformed(ax.transData).transformed(ax.transAxes.inverted())
    if bbox.width < MIN_PLOT_APPARENT_SIZE[0]:
        xlim[1] = data_xmin + (data_xmax - data_xmin) / MIN_PLOT_APPARENT_SIZE[0]
    if bbox.height < MIN_PLOT_APPARENT_SIZE[1]:
        ylim[1] = data_ymin + (data_ymax - data_ymin) / MIN_PLOT_APPARENT_SIZE[1]
    
    
    with warnings.catch_warnings():
        warnings.simplefilter('ignore')
        ax.set_xlim(xlim)
        ax.set_ylim(ylim)

    if cli.args['batch']:
        cli.write("Saving plot as '%s'." % default_savename, flush=True)
        plt.savefig(default_savename)
        return ""
    
    warnings.filterwarnings('error')
    try:
        cli.write("Displaying Matplotlib plot. Please close the plot to continue execution.", flush=True)
        plt.show()
    except UserWarning as e:
        if 'Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure.' != str(e):
            raise
        cli.write("Displaying plot failed: '%s'" % str(e), flush=True)
        cli.write("Saving plot as '%s'." % default_savename, flush=True)
        plt.savefig(default_savename)

    return ""
    



def plot_timesteps(default_savename):
    global cli
    import matplotlib.pyplot as plt

    # TODO: update the function below to loop over all simulations
    #raise NotImplementedError

    def get_plot_data(simulation):
        max_iterations = 1000

        total_iterations = 0
        for logfile in simulation.get_logfiles():
            total_iterations += logfile.get_number_of_iterations()

        #print(total_iterations)

        step = 1
        if total_iterations > max_iterations:
            step = int(total_iterations / max_iterations)
        
        times = []
        dts = []
        logfiles = simulation.get_logfiles()
        nlogfiles = len(logfiles)
        for i, logfile in enumerate(logfiles):
            try:
                #cli.write("(%d/%d) Reading %s" % (i+1, nlogfiles, logfile.path))
                iterations = logfile.get_iterations(step=step)
                for iteration in iterations:
                    times += [iteration['time']]
                    dts += [iteration['dts']]
            except: pass
        times = np.asarray(times, dtype=float)
        dts = np.asarray(dts, dtype=float) * float(simulation.units['t'])
        idx = np.argsort(times)
        times = times[idx]
        dts = dts[idx]
        return times, dts

    fig, ax = plt.subplots(nrows=len(cli.simulations), sharex=True, sharey=True)

    if not isinstance(ax, np.ndarray):
        ax = np.asarray([ax], dtype=object)
    
    times = []
    dts = []
    max_time = 0.
    max_dt = 0.
    unit = None
    dtunit = None
    for a, simulation in zip(ax, cli.simulations):
        time, dt = get_plot_data(simulation)
        times += [time]
        dts += [dt]
        maxt = np.amax(time)
        if maxt > max_time:
            max_time = maxt
            unit = simulation.units['t']
        for t in dt:
            if np.any(t < 1.e30):
                _max = np.amax(t[t < 1.e30])
                if _max > max_dt:
                    max_dt = _max
                    dtunit = simulation.units['t']
    if unit is None or dtunit is None:
        raise Exception("This should never happen")

    for a in ax:
        a.set_ylabel("log10 (Time Steps / [s])")

    max_time_unit = max_time * unit
    auto = max_time_unit.auto()
    xfactor = float(unit.convert(auto.label))
    ax[-1].set_xlabel("Simulation Time [%s]" % auto.label)
    
    for k, (a, simulation) in enumerate(zip(ax, cli.simulations)):
        for dt in dts:
            for i in range(dt.shape[1]):
                a.plot(times[k] * xfactor, np.log10(dt[:,i]), label='dt'+str(i+1))
            
        title = starsmashertools.helpers.string.shorten(
            os.path.basename(simulation.directory),
            30,
        )
        a.set_title(title)
            
    ax[0].legend()

    #plt.subplots_adjust(hspace=0)
    plt.tight_layout()
        
    if cli.args['batch']:
        cli.write("Saving plot as '%s'." % default_savename, flush=True)
        plt.savefig(default_savename)
        return ""

    warnings.filterwarnings('error')
    try:
        cli.write("Displaying Matplotlib plot. Please close the plot to continue execution.", flush=True)
        plt.show()
    except UserWarning as e:
        if 'Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure.' != str(e):
            raise
        cli.write("Displaying plot failed: '%s'" % str(e), flush=True)
        cli.write("Saving plot as '%s'." % default_savename, flush=True)
        plt.savefig(default_savename)

    return ""
    





################################################################################
################################# Front end ####################################
################################################################################

newline = starsmashertools.bintools.Style.get('characters', 'newline')
starsmashertools.bintools.Style.set('formatting', 'footer', newline)

valid_plots = collections.OrderedDict()
valid_plots['wall time plot (iterations)'] = {
    'function' : lambda default_savename='walltime_iterations.png',yaxis='iterations': plot_wall_time(default_savename, yaxis),
    'default savename' : 'walltime_iterations.png',
    'cli name' : 'wall_iter',
}
valid_plots['wall time plot (simulation time)'] = {
    'function' : lambda default_savename='walltime_simulation.png',yaxis='simulation': plot_wall_time(default_savename, yaxis),
    'default savename' : 'walltime_simulation.png',
    'cli name' : 'wall_sim',
}
#"""
valid_plots['timesteps'] = {
    'function' : plot_timesteps,
    'default savename' : 'timesteps.png',
    'cli name' : 'timesteps',
}
#"""


cli = starsmashertools.bintools.cli.CLI(
    'timing',
    "A tool for analyzing real-world timing data associated with a StarSmasher simulation.",
)

cli.parser.add_argument(
    '-d',
    '--directory',
    nargs='?',
    required=False,
    metavar='directory',
    type=str,
    default=os.getcwd(),
    help='The StarSmasher simulation directory. Defaults to the current working directory if not specified.'
)

cli.parser.add_argument(
    '-b',
    '--batch',
    action='store_true',
    required=False,
    help="Batch mode. This should be used when executing this program in i.e. a bash script or shell.",
)

#cli.parser.add_argument(
#    '--total',
#    action='store_true',
#    required=False,
#    help="Prints the 'total time' option and then exits the program",
#)

cli.parser.add_argument(
    '-p',
    '--plot',
    nargs='?',
    choices=[val['cli name'] for val in valid_plots.values()],
    type=str,
    required=False,
    help="Creates a plot of the given type",
)

cli.parser.add_argument(
    '--plot-name',
    nargs='?',
    type=str,
    required=False,
    metavar='filename',
    help="The name of the image that will be saved when plotting wall time data while in batch mode ('-b') or when option '--plot' is given."
)


mainmenu = cli.add_list(
    [int, str],
    items = list(valid_plots.keys()),
    bullet='%5d)',
    header=starsmashertools.bintools.Style.bold("Main Menu") + newline + newline + 'Choose an option' + newline,
    simulation_controls=True,
)




#columns, labels = get_time_table()

#timetable = cli.add_table(
#    [],
#    get_time_table,
#    back=mainmenu,
#    indent=4,
#    header=newline,
#)
#mainmenu.connect(timetable, [0, 'total time'])

for i, (key, obj) in enumerate(valid_plots.items()):
    default_savename = cli.args['plot_name']
    if default_savename is None:
        default_savename = obj['default savename']

    func = lambda obj=obj, default_savename=default_savename: obj['function'](default_savename=default_savename)
    
    page = cli.add_page(
        [],
        func,
        back=mainmenu,
        _quit=True,
    )
    mainmenu.connect(page, [i, key])

cli.set_mainmenu(mainmenu)


#if cli.args['total']:
#    timetable.show(skip=True)

if cli.args['plot']:
    for key, val in valid_plots.items():
        if val['cli name'] == cli.args['plot']:
            val['function']()
            break
    else:
        raise Exception("Unrecognized plot name '%s'" % cli.args['plot'])

if cli.args['batch'] or cli.args['plot']:# or cli.args['total']:
    quit()

cli.run()
