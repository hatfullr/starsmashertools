#!/usr/bin/env python3

# This program is used to measure how much time a StarSmasher simulation took to
# run. It uses os.getmtime to measure timings.

import starsmashertools
import starsmashertools.preferences
import starsmashertools.mpl.plotdata
import starsmashertools.helpers.path
import starsmashertools.bintools.cli
import starsmashertools.bintools
import starsmashertools.helpers.path
import collections
import os
import numpy as np
import warnings

################################################################################
################################## Back end ####################################
################################################################################

# Gets set in the front end
simulation = None
cli = None

def get_file_creation_time(filename):
    return os.path.getmtime(filename)

def get_time_table():
    global simulation
    
    logcolumn = []
    outcolumn = []
    totalcolumn = []
    fraccolumn = []

    fmt = "%10s:   %s ... %s"
    filenames = simulation.get_outputfiles()
    longest = -float('inf')
    summed = 0
    for logfile in simulation.get_logfiles():
        logcolumn += [starsmashertools.helpers.path.basename(logfile.path)]
        
        has = logfile.hasOutputFiles(filenames)
        first = None
        for i, h in enumerate(has):
            if h:
                first = filenames[i]
                break
        last = None
        for i, h in enumerate(has[::-1]):
            if h:
                last = filenames[len(filenames) - i - 1]
                break

        outcolumn += ["%s ... %s" % (
            starsmashertools.helpers.path.basename(first),
            starsmashertools.helpers.path.basename(last),
        )]
        t1 = get_file_creation_time(first)
        t2 = get_file_creation_time(last)
        totalcolumn += [t2-t1]
        longest = max(longest, t2-t1)
        summed += t2-t1
        
    fraccolumn = [c / summed for c in totalcolumn]

    labels = [
        'Log File',
        'Output Files',
        'Fraction',
        'Total Time',
    ]
    unit = 1.
    if longest > -float('inf'):
        try_units = collections.OrderedDict()
        try_units['s'] = 1.
        try_units['min'] = 60.
        try_units['hr'] = 3600.
        try_units['day'] = 3600. * 24.

        for key, val in try_units.items():
            if longest / val <= 100:
                labels[-1] += ' (' + key + ')'
                totalcolumn = [c / val for c in totalcolumn]
                break

    if '(' not in labels[-1]: labels[-1] += ' (s)'
    
    fraccolumn = ['%7.5f' % c for c in fraccolumn]

    logcolumn += ['']
    outcolumn += ['']
    fraccolumn += ['']
    totalcolumn += [sum([c for c in totalcolumn])]
    
    
    labels = [starsmashertools.bintools.Style.bold(label) for label in labels]
    totalcolumn = ['%13.10f' % c for c in totalcolumn]
    
    return [logcolumn, outcolumn, fraccolumn, totalcolumn], labels

def plot_wall_time():
    global cli
    import matplotlib.pyplot as plt
    import matplotlib.dates
    import datetime

    filenames = simulation.get_outputfiles()
    times = []
    for filename in filenames:
        times += [get_file_creation_time(filename)]

    dates = [datetime.datetime.fromtimestamp(time) for time in times]
    datenums = matplotlib.dates.date2num(dates)

    ylim = [0, simulation['tf'] / simulation['dtout']]
    x = datenums
    y = np.arange(len(filenames))
    
    
        
    fig, ax = plt.subplots()
    plt.grid(alpha=0.2)
    ax.margins(0, 0)
    ax.set_ylabel("# output files")
    fig.autofmt_xdate() # Make pretty tick labels

    xfmt = matplotlib.dates.DateFormatter('%Y-%m-%d')
    ax.xaxis.set_major_formatter(xfmt)

    ax.plot(x, y)

    if ylim[1] > len(filenames):
        # Try to fit a linear function of the most recent half of simulation
        num = int(len(x) * 0.5)
        labels = [
            'linear fit',
            'quadratic fit',
            #'cubic fit',
        ]
        xlim = ax.get_xlim()
        xmax = -np.inf
        for i, label in enumerate(labels):
            coef = np.polyfit(y[-num:], x[-num:], i + 1)
            poly1d_fn = np.poly1d(coef)
            _y = np.arange(ylim[1])
            _x = poly1d_fn(_y)
            
            idx = _x >= xlim[0]
            if np.any(idx):
                ax.plot(_x[idx], _y[idx], label=label, lw=0.5, zorder=-np.inf)
                xmax = max(xmax, np.nanmax(_x[idx]))
        cli.write("The function fits shown were created using the most recent half of the data.", flush=True)
        ax.legend()
        if np.isfinite(xmax):
            ax.set_xlim(None, xmax)

    ax.set_ylim(ylim)
    

    plt.tight_layout()

    if cli.args['batch']:
        cli.write("Saving plot as '%s'." % cli.args['wall_image'], flush=True)
        plt.savefig(cli.args['wall_image'])
        return ""
    
    warnings.filterwarnings('error')
    try:
        cli.write("Displaying Matplotlib plot. Please close the plot to continue execution.", flush=True)
        plt.show()
    except UserWarning as e:
        if 'Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure.' != str(e):
            raise
        cli.write("Displaying plot failed: '%s'" % str(e), flush=True)
        cli.write("Saving plot as '%s'." % cli.args['wall_image'], flush=True)
        plt.savefig(cli.args['wall_image'])

    return ""
    











################################################################################
################################# Front end ####################################
################################################################################

newline = starsmashertools.bintools.Style.get('characters', 'newline')
starsmashertools.bintools.Style.set('formatting', 'footer', newline)

valid_plots = collections.OrderedDict()
valid_plots['wall'] = plot_wall_time


cli = starsmashertools.bintools.cli.CLI(
    'timing',
    "A tool for analyzing real-world timing data associated with a StarSmasher simulation.",
)

cli.parser.add_argument(
    '-d',
    '--directory',
    nargs='?',
    required=False,
    metavar='directory',
    type=str,
    default=os.getcwd(),
    help='The StarSmasher simulation directory. Defaults to the current working directory if not specified.'
)

cli.parser.add_argument(
    '-b',
    '--batch',
    action='store_true',
    required=False,
    help="Batch mode. This should be used when executing this program in i.e. a bash script or shell.",
)

cli.parser.add_argument(
    '--total',
    action='store_true',
    required=False,
    help="Prints the 'total time' option and then exits the program",
)

cli.parser.add_argument(
    '-p',
    '--plot',
    nargs='?',
    choices=valid_plots.keys(),
    type=str,
    required=False,
    help="Creates a plot of the given type",
)

cli.parser.add_argument(
    '--wall-image',
    nargs='?',
    type=str,
    required=False,
    default='walltime.png',
    metavar='filename',
    help="The name of the image that will be saved when plotting wall time data while in batch mode ('-b') or when option '--plot' is given."
)

simulation = starsmashertools.get_simulation(cli.args['directory'])


mainmenu = cli.add_list(
    [int, str],
    items=[
        'total time',
        'wall time plot',
    ],
    bullet='%5d)',
    header=newline + starsmashertools.bintools.Style.bold("Main Menu") + newline + newline + 'Choose an option' + newline,
)




columns, labels = get_time_table()

timetable = cli.add_table(
    [],
    columns = columns,
    labels = labels,
    back=mainmenu,
    indent=4,
    header=newline,
)
mainmenu.connect(timetable, [0, 'total time'])

wt = cli.add_page(
    [],
    plot_wall_time,
    back=mainmenu,
)
mainmenu.connect(wt, [1, 'wall time plot'])

cli.set_mainmenu(mainmenu)


if cli.args['total']:
    timetable.show(skip=True)

if cli.args['plot']:
    valid_plots[cli.args['plot']]()

if cli.args['batch'] or cli.args['plot'] or cli.args['total']:
    quit()

cli.run()
