#!/usr/bin/env python3

# This program is used to measure how much time a StarSmasher simulation took to
# run. It uses os.getmtime to measure timings.

import starsmashertools
import starsmashertools.preferences
import starsmashertools.mpl.plotdata
import starsmashertools.helpers.path
import starsmashertools.bintools.cli
import starsmashertools.bintools
import starsmashertools.helpers.path
import collections
import os

################################################################################
################################## Back end ####################################
################################################################################

# Gets set in the front end
simulation = None

def get_time_table():
    global simulation
    
    logcolumn = []
    outcolumn = []
    totalcolumn = []
    fraccolumn = []

    fmt = "%10s:   %s ... %s"
    filenames = simulation.get_outputfiles()
    longest = -float('inf')
    summed = 0
    for logfile in simulation.get_logfiles():
        logcolumn += [starsmashertools.helpers.path.basename(logfile.path)]
        
        has = logfile.hasOutputFiles(filenames)
        first = None
        for i, h in enumerate(has):
            if h:
                first = filenames[i]
                break
        last = None
        for i, h in enumerate(has[::-1]):
            if h:
                last = filenames[len(filenames) - i - 1]
                break

        outcolumn += ["%s ... %s" % (
            starsmashertools.helpers.path.basename(first),
            starsmashertools.helpers.path.basename(last),
        )]
        t1 = os.path.getmtime(first)
        t2 = os.path.getmtime(last)
        totalcolumn += [t2-t1]
        longest = max(longest, t2-t1)
        summed += t2-t1
        
    fraccolumn = [c / summed for c in totalcolumn]

    labels = [
        'Log File',
        'Output Files',
        'Fraction',
        'Total Time',
    ]
    unit = 1.
    if longest > -float('inf'):
        try_units = collections.OrderedDict()
        try_units['s'] = 1.
        try_units['min'] = 60.
        try_units['hr'] = 3600.
        try_units['day'] = 3600. * 24.

        for key, val in try_units.items():
            if longest / val <= 100:
                labels[-1] += ' (' + key + ')'
                totalcolumn = [c / val for c in totalcolumn]
                break

    if '(' not in labels[-1]: labels[-1] += ' (s)'
    
    fraccolumn = ['%7.5f' % c for c in fraccolumn]

    logcolumn += ['']
    outcolumn += ['']
    fraccolumn += ['']
    totalcolumn += [sum([c for c in totalcolumn])]
    
    
    labels = [starsmashertools.bintools.Style.bold(label) for label in labels]
    totalcolumn = ['%13.10f' % c for c in totalcolumn]
    
    return [logcolumn, outcolumn, fraccolumn, totalcolumn], labels













################################################################################
################################# Front end ####################################
################################################################################

#modes = collections.OrderedDict()
#modes['total time'] = total_time


newline = starsmashertools.bintools.Style.get('characters', 'newline')
starsmashertools.bintools.Style.set('formatting', 'footer', newline)

cli = starsmashertools.bintools.cli.CLI(
    'inspectpdc',
    "A tool for viewing the contents of a checkpoint file created by starsmashertools, called 'pdc.json.gz' by default.",
)

cli.parser.add_argument(
    '-d',
    '--directory',
    nargs='?',
    required=False,
    metavar='directory',
    type=str,
    default=os.getcwd(),
    help='The StarSmasher simulation directory. Defaults to the current working directory if not specified.'
)

simulation = starsmashertools.get_simulation(cli.args['directory'])

mainmenu = cli.add_list(
    [int, str],
    items=[
        'total time',
    ],
    bullet='%5d)',
    header=newline + starsmashertools.bintools.Style.bold("Main Menu") + newline + newline + 'Choose an option' + newline,
)




columns, labels = get_time_table()

timetable = cli.add_table(
    [],
    columns = columns,
    labels = labels,
    back=mainmenu,
    indent=4,
    header=newline,
)

mainmenu.connect(timetable, [0, 'total time'])

"""
for i, (key, val) in enumerate(modes.items()):
    page = cli.add_page(
        [],
        val,
        back=mainmenu,
        indent=4,
    )
    mainmenu.connect(page, [i, key])
"""

cli.set_mainmenu(mainmenu)

cli.run()
