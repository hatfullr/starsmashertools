#!/usr/bin/env python3

import starsmashertools
import starsmashertools.bintools.cli
import starsmashertools.bintools
import starsmashertools.preferences
import starsmashertools.helpers.path
import tarfile
import os

# Do some setting up

newline = starsmashertools.bintools.Style.get('characters', 'newline')
starsmashertools.bintools.Style.set('formatting', 'footer', newline)


compression_methods = list(tarfile.TarFile.OPEN_METH.keys())
if 'tar' in compression_methods: compression_methods.remove('tar')
arr = ["'%s'" % key for key in compression_methods]
if len(arr) == 1: compression_methods_string = arr[0]
else:
    compression_methods_string = ", ".join(arr[:-1]) 
    if len(arr) > 2: compression_methods_string += ","
    compression_methods_string += " and " + arr[-1]
default_compression_method = starsmashertools.preferences.get_default('starsmasherdir', 'compression method')



################################################################################
################################## Back end ####################################
################################################################################

def get_size_string(size):
    fmt = '{:>6.2f} {:<2s}'
    if size < 1e6: return fmt.format(size/1e3, 'KB')
    elif size < 1e9: return fmt.format(size/1e6, 'MB')
    elif size < 1e12: return fmt.format(size/1e9, 'GB')
    return fmt.format(size/1e12, 'TB')

""" # Use this to test the get_size_string method
current = 1e0
for i in range(0, 15):
    print(get_size_string(current), current)
    current *= 10
quit()
"""

def estimate_size():
    global simulation

    outputfiles = simulation.get_outputfiles()

    current_output_size = 0
    current_other_size = 0
    current_size = 0
    for dirpath, dirnames, filenames in starsmashertools.helpers.path.walk(simulation.directory):
        for filename in filenames:
            path = starsmashertools.helpers.path.join(dirpath, filename)
            # Skip symbolic links
            if starsmashertools.helpers.path.islink(path): continue
            size = starsmashertools.helpers.path.getsize(path)
            current_size += size
            if path in outputfiles: current_output_size += size
            else: current_other_size += size

    tf = simulation['tf']
    dtout = simulation['dtout']

    if len(simulation.get_outputfiles()) == 0:
        raise Exception("Cannot estimate the final size of directory because there are no output files in the directory")
    
    final_output = simulation.get_output(-1)
    
    nremaining = int((tf - final_output['t']) / dtout) + 1
    additional_size = nremaining * starsmashertools.helpers.path.getsize(final_output.path)

    current = current_size
    current_outputs = current_output_size
    current_other = current_other_size
    
    final = current_size + additional_size
    final_outputs = additional_size + current_output_size
    final_other = current_other

    remaining = final - current
    remaining_outputs = final_outputs - current_outputs
    remaining_other = final_other - current_other

    ret = """
current:
   outputs = {current_outputs:s}
     other = {current_other:s}
     total = {current:s}

final (estimated):
   outputs = {final_outputs:s}
     other = {final_other:s}
     total = {final:s}

remaining (estimated):
   outputs = {remaining_outputs:s}
     other = {remaining_other:s}
     total = {remaining:s}
    """
    ret = newline.join(ret.split('\n')[1:-1])
    return ret.format(
        current=get_size_string(current),
        current_outputs=get_size_string(current_outputs),
        current_other=get_size_string(current_other),
        final=get_size_string(final),
        final_outputs=get_size_string(final_outputs),
        final_other=get_size_string(final_other),
        remaining=get_size_string(remaining),
        remaining_outputs=get_size_string(remaining_outputs),
        remaining_other=get_size_string(remaining_other),
    )
    



################################################################################
################################# Front end ####################################
################################################################################

cli = starsmashertools.bintools.cli.CLI(
    'starsmasherdir',
    "Perform various operations on a StarSmasher simulation directory. You can change the default values for options in the preferences.py file.",
)

cli.parser.add_argument(
    '-d',
    '--directory',
    nargs='?',
    type=str,
    default=os.getcwd(),
    required=False,
    metavar='directory',
    help='The StarSmasher simulation directory. Defaults to the current working directory if not specified.',
)

"""
cli.parser.add_argument(
    '-c',
    '--compress',
    default=os.path.basename(os.getcwd()),
    required=False,
    metavar='',
    help='Compress the contents of the directory using gzip and tar into a single file with this name. The files that are compressed are deleted  All contents will be stored in a file located in the simulation directory ',
)

cli.parser.add_argument(
    '--compression-method',
    nargs='?',
    default='gz',
    type=str,
    required=False,
    metavar='str',
    help="The method to use while compressing files. Available options are %s. Default = '%s'." % (compression_methods_string, default_compression_method),
)
"""


simulation = starsmashertools.get_simulation(cli.args['directory'])



mainmenu = cli.add_list(
    [int, str],
    items = [
        'estimate size',
        'compress',
    ],
    bullet='%5d)',
    header=newline + starsmashertools.bintools.Style.bold("Main Menu") + newline + newline + ("Directory = %s" % cli.args['directory']) + newline + newline + 'Choose an option' + newline,
)


estimatepage = cli.add_page(
    [],
    estimate_size,
    header = newline,
    _quit=False,
)
mainmenu.connect(estimatepage, [0, 'estimate size'])

compressmethodpage = cli.add_list(
    [int, str],
    items = compression_methods,
    bullet='%5d)',
    header=newline + "Choose a compression method" + newline,
    back=mainmenu,
)
mainmenu.connect(compressmethodpage, [1, 'compress'])

cli.set_mainmenu(mainmenu)
cli.run()
