#!/usr/bin/env python3

import starsmashertools
import starsmashertools.bintools.cli
import starsmashertools.bintools
import starsmashertools.preferences
import starsmashertools.helpers.path
import starsmashertools.helpers.string
import os

# Do some setting up

newline = starsmashertools.bintools.Style.get('characters', 'newline')
starsmashertools.bintools.Style.set('formatting', 'footer', newline)

################################################################################
################################## Back end ####################################
################################################################################

def get_size_string(size):
    fmt = '{:>6.2f} {:<2s}'
    if size < 1e6: return fmt.format(size/1e3, 'KB')
    elif size < 1e9: return fmt.format(size/1e6, 'MB')
    elif size < 1e12: return fmt.format(size/1e9, 'GB')
    return fmt.format(size/1e12, 'TB')

""" # Use this to test the get_size_string method
current = 1e0
for i in range(0, 15):
    print(get_size_string(current), current)
    current *= 10
quit()
"""

def estimate_size():
    global simulation

    outputfiles = simulation.get_outputfiles()

    current_output_size = 0
    current_other_size = 0
    current_size = 0
    for dirpath, dirnames, filenames in starsmashertools.helpers.path.walk(simulation.directory):
        for filename in filenames:
            path = starsmashertools.helpers.path.join(dirpath, filename)
            # Skip symbolic links
            if starsmashertools.helpers.path.islink(path): continue
            size = starsmashertools.helpers.path.getsize(path)
            current_size += size
            if path in outputfiles: current_output_size += size
            else: current_other_size += size

    tf = simulation['tf']
    dtout = simulation['dtout']

    most_recent_t = 0.
    if len(outputfiles) > 0:
        final_output = simulation.get_output(-1)
        most_recent_t = final_output['t']
    nremaining = int((tf - most_recent_t) / dtout) + 1

    additional_size = 0.
    if len(outputfiles) > 0:
        additional_size = nremaining * starsmashertools.helpers.path.getsize(final_output.path)
        

    current = current_size
    current_outputs = current_output_size
    current_other = current_other_size
    
    final = current_size + additional_size
    final_outputs = additional_size + current_output_size
    final_other = current_other

    remaining = final - current
    remaining_outputs = final_outputs - current_outputs
    remaining_other = final_other - current_other

    ret = """
current:
   outputs = {current_outputs:s}
     other = {current_other:s}
     total = {current:s}

final (estimated):
   outputs = {final_outputs:s}
     other = {final_other:s}
     total = {final:s}

remaining (estimated):
   outputs = {remaining_outputs:s}
     other = {remaining_other:s}
     total = {remaining:s}
    """
    ret = newline.join(ret.split('\n')[1:-1])
    return ret.format(
        current=get_size_string(current),
        current_outputs=get_size_string(current_outputs),
        current_other=get_size_string(current_other),
        final=get_size_string(final),
        final_outputs=get_size_string(final_outputs),
        final_other=get_size_string(final_other),
        remaining=get_size_string(remaining),
        remaining_outputs=get_size_string(remaining_outputs),
        remaining_other=get_size_string(remaining_other),
    )

def compress(**kwargs):
    previous = get_size_string(simulation.get_size())
    try:
        simulation.compress(**kwargs)
    except:
        cli.write("")
        starsmashertools.bintools.print_error(halt=False)
        return ""
    new = get_size_string(simulation.get_size())
    
    return "Directory size: %s -> %s" % (previous, new)


def decompress():
    previous = get_size_string(simulation.get_size())
    try:
        simulation.decompress()
    except:
        cli.write("")
        starsmashertools.bintools.print_error(halt=False)
        return ""

    new = get_size_string(simulation.get_size())
    
    return "Directory size: %s -> %s" % (previous, new)



################################################################################
################################# Front end ####################################
################################################################################
if __name__ == "__main__":
    cli = starsmashertools.bintools.cli.CLI(
        'starsmasherdir',
        "Perform various operations on a StarSmasher simulation directory. You can change the default values for options in the preferences.py file.",
    )

    cli.parser.add_argument(
        '-d',
        '--directory',
        nargs='?',
        type=str,
        default=os.getcwd(),
        required=False,
        metavar='directory',
        help='The StarSmasher simulation directory. Defaults to the current working directory if not specified.',
    )




    cli.parser.add_argument(
        '-c',
        '--compress',
        default=os.path.basename(os.getcwd()),
        required=False,
        metavar='',
        help='Compress the contents of the directory into a single file with this name. The files that are compressed are deleted. All contents will be stored in a file located in the simulation directory.',
    )

    simulation = starsmashertools.get_simulation(cli.args['directory'])

    compressed = simulation.compressed


    mainmenu = cli.add_list(
        [int, str],
        items = [
            'estimate size',
            'compress',
            'decompress',
        ],
        bullet='%5d)',
        header=starsmashertools.bintools.Style.bold("Main Menu") + newline + newline + ("Directory = %s" % cli.args['directory']) + newline + newline + 'Choose an option' + newline,
    )


    estimatepage = cli.add_page(
        [],
        estimate_size,
        header = newline,
        _quit=False,
    )
    mainmenu.connect(estimatepage, [0, 'estimate size'])


    compresspage = cli.add_list(
        [int, str],
        items = [
            "Keep",
            "Delete",
            "Delete after",
        ],
        bullet='%5d)',
        header=newline + "Do you want to delete the original files or keep them? File modification times will be preserved. If you choose 'Delete' then files will be deleted immediately after they are compressed. If you choose 'Delete after' then files will be deleted only after all files have been compressed." + newline + newline + "Choose an option" + newline,
        back=mainmenu,
    )
    mainmenu.connect(compresspage, [1, 'compress'])


    keeppage = cli.add_page(
        [],
        lambda delete=False, delete_after=False: compress(delete=delete, delete_after=delete_after),
        _quit = False,
        header=newline,
    )
    compresspage.connect(keeppage, [0, 'Keep'])

    deletepage = cli.add_page(
        [],
        lambda delete=True, delete_after=False: compress(delete=delete, delete_after=delete_after),
        _quit = False,
        header=newline,
    )
    compresspage.connect(deletepage, [1, 'Delete'])

    deleteafterpage = cli.add_page(
        [],
        lambda delete=True, delete_after=True: compress(delete=delete, delete_after=delete_after),
        _quit = False,
        header=newline,
    )
    compresspage.connect(deleteafterpage, [2, 'Delete after'])


    decompresspage = cli.add_page(
        [],
        decompress,
        _quit=False,
        header=newline,
    )
    mainmenu.connect(decompresspage, [2, 'decompress'])


    cli.set_mainmenu(mainmenu)
    cli.run()
