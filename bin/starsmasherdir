#!/usr/bin/env python3

import starsmashertools
import starsmashertools.bintools.cli
import starsmashertools.bintools
import starsmashertools.preferences
import starsmashertools.helpers.path
import starsmashertools.helpers.string
import os

# Do some setting up

newline = starsmashertools.bintools.Style.get('characters', 'newline')
starsmashertools.bintools.Style.set('formatting', 'footer', newline)

################################################################################
################################## Back end ####################################
################################################################################

def get_size_string(size):
    fmt = '{:>6.2f} {:<2s}'
    if size < 1e6: return fmt.format(size/1e3, 'KB')
    elif size < 1e9: return fmt.format(size/1e6, 'MB')
    elif size < 1e12: return fmt.format(size/1e9, 'GB')
    return fmt.format(size/1e12, 'TB')

""" # Use this to test the get_size_string method
current = 1e0
for i in range(0, 15):
    print(get_size_string(current), current)
    current *= 10
quit()
"""

def estimate_size():
    global simulation

    outputfiles = simulation.get_outputfiles()

    current_output_size = 0
    current_other_size = 0
    current_size = 0
    for dirpath, dirnames, filenames in starsmashertools.helpers.path.walk(simulation.directory):
        for filename in filenames:
            path = starsmashertools.helpers.path.join(dirpath, filename)
            # Skip symbolic links
            if starsmashertools.helpers.path.islink(path): continue
            size = starsmashertools.helpers.path.getsize(path)
            current_size += size
            if path in outputfiles: current_output_size += size
            else: current_other_size += size

    tf = simulation['tf']
    dtout = simulation['dtout']

    most_recent_t = 0.
    if len(outputfiles) > 0:
        final_output = simulation.get_output(-1)
        most_recent_t = final_output['t']
    nremaining = int((tf - most_recent_t) / dtout) + 1

    additional_size = 0.
    if len(outputfiles) > 0:
        additional_size = nremaining * starsmashertools.helpers.path.getsize(final_output.path)
        

    current = current_size
    current_outputs = current_output_size
    current_other = current_other_size
    
    final = current_size + additional_size
    final_outputs = additional_size + current_output_size
    final_other = current_other

    remaining = final - current
    remaining_outputs = final_outputs - current_outputs
    remaining_other = final_other - current_other

    ret = """
current:
   outputs = {current_outputs:s}
     other = {current_other:s}
     total = {current:s}

final (estimated):
   outputs = {final_outputs:s}
     other = {final_other:s}
     total = {final:s}

remaining (estimated):
   outputs = {remaining_outputs:s}
     other = {remaining_other:s}
     total = {remaining:s}
    """
    ret = newline.join(ret.split('\n')[1:-1])
    return ret.format(
        current=get_size_string(current),
        current_outputs=get_size_string(current_outputs),
        current_other=get_size_string(current_other),
        final=get_size_string(final),
        final_outputs=get_size_string(final_outputs),
        final_other=get_size_string(final_other),
        remaining=get_size_string(remaining),
        remaining_outputs=get_size_string(remaining_outputs),
        remaining_other=get_size_string(remaining_other),
    )

def compress(simulation, from_argument=False, **kwargs):
    if not from_argument:
        kwargs['verbose'] = kwargs.get('verbose', cli.write)
        if not isinstance(simulation, starsmashertools.lib.simulation.Simulation):
            raise TypeError("When compress is called from interactive mode, the given simulation must be of type 'starsmashertools.lib.simulation.Simulation', not '%s'" % type(simulation).__name__)
        simulation = [simulation]

    ret = []
    for s in simulation:    
        previous = get_size_string(s.get_size())
        try:
            s.compress(**kwargs)
        except:
            if from_argument: raise
            else:
                cli.write("")
                starsmashertools.bintools.print_error(halt=False)
                return ""

        if not from_argument:
            new = get_size_string(s.get_size())
            ret += ["%s\nDirectory size: %s -> %s" % (s.directory, previous, new)]
    return newline.join(ret)


def decompress(simulation, from_argument=False, **kwargs):
    if not from_argument:
        kwargs['verbose'] = kwargs.get('verbose', cli.write)
        if not isinstance(simulation, starsmashertools.lib.simulation.Simulation):
            raise TypeError("When decompress is called from interactive mode, the given simulation must be of type 'starsmashertools.lib.simulation.Simulation', not '%s'" % type(simulation).__name__)
        simulation = [simulation]

    ret = []
    for s in simulation:
        previous = get_size_string(s.get_size())
        try:
            s.decompress(**kwargs)
        except:
            if from_argument: raise
            else:
                cli.write("")
                starsmashertools.bintools.print_error(halt=False)
                return ""

        if not from_argument:
            new = get_size_string(s.get_size())
            ret += ["%s\nDirectory size: %s -> %s" % (s.directory, previous, new)]
    return newline.join(ret)

def get_redundant():
    ret = []
    props = simulation.get_compressed_properties()
    for filename, mtime in zip(props['filenames'], props['mtimes']):
        if starsmashertools.helpers.path.isfile(filename):
            if starsmashertools.helpers.path.getmtime(filename) == mtime:
                ret += [filename]
    return ret

def detect_redundant():
    return len(get_redundant()) > 0

def delete_redundant():
    """
    Get rid of files that exist both inside and outside a zip file.
    """
    previous = get_size_string(simulation.get_size())
    for filename in get_redundant():
        starsmashertools.helpers.path.remove(filename)
    new = get_size_string(simulation.get_size())
    return "Directory size: %s -> %s" % (previous, new)


################################################################################
################################# Front end ####################################
################################################################################

cli = starsmashertools.bintools.cli.CLI(
    'starsmasherdir',
    "Perform various operations on a StarSmasher simulation directory. You can change the default values for options in the preferences.py file.",
    require_valid_directory=False,
)

cli.parser.add_argument(
    'directory',
    nargs='*',
    type=str,
    default=os.getcwd(),
    metavar='directory',
    help='The StarSmasher simulation directory. Defaults to the current working directory if not specified.',
)

cli.parser.add_argument(
    '-c',
    '--compress',
    action='store_true',
    default=False,
    required=False,
    help='Compress the contents of the directories into a single file each. The files that are compressed are deleted after compression has completed. Cannot be specified when -d/--decompress are specified. Raises an exception if the directory is already compressed.',
)


cli.parser.add_argument(
    '-d',
    '--decompress',
    action='store_true',
    default=False,
    required=False,
    help='Decompress directories into a single file with this name and delete the compressed file afterwards. Cannot be specified when -c/--compress are specified. Raises an exception if the directory is not currently compressed.',
)



if cli.args['compress'] and cli.args['decompress']:
    help_message = cli.parser.format_help()
    raise Exception("Cannot specify both compress and decompress options at the same time.\n\n%s" % help_message)


simulations = [starsmashertools.get_simulation(directory) for directory in cli.args['directory']]

if len(simulations) == 1: simulation = simulations[0]


if cli.args['compress']:
    compress(
        simulations,
        from_argument=True,
        delete=True,
        delete_after=True,
    )
    quit()
if cli.args['decompress']:
    decompress(
        simulations,
        from_argument=True,
        delete=True,
    )
    quit()


def on_mainmenu_get_content():
    global mainmenu
    mainmenu.items = []
    mainmenu.add('estimate size')
    if simulation.compressed:
        if mainmenu.connected(compresspage):
            mainmenu.disconnect(compresspage)
        mainmenu.add('decompress')
        if not mainmenu.connected(decompresspage):
            mainmenu.connect(decompresspage, [1, 'decompress'])

        if detect_redundant():
            mainmenu.add('remove redundant files')
            if not mainmenu.connected(removeconfirmationpage):
                mainmenu.connect(removeconfirmationpage, [2, 'remove redundant files'])
    else:
        if mainmenu.connected(decompresspage):
            mainmenu.disconnect(decompresspage)
        if mainmenu.connected(removeconfirmationpage):
            mainmenu.disconnect(removeconfirmationpage)
        mainmenu.add('compress')
        if not mainmenu.connected(compresspage):
            mainmenu.connect(compresspage, [1, 'compress'])

    


mainmenu = cli.add_list(
    [int, str],
    bullet='%5d)',
    header=starsmashertools.bintools.Style.bold("Main Menu") + newline + newline + ("Directory = %s" % cli.args['directory']) + newline + newline + 'Choose an option' + newline,
)

mainmenu.add_listener('get_content', on_mainmenu_get_content)

estimatepage = cli.add_page(
    [],
    estimate_size,
    header = newline,
    _quit=False,
)
mainmenu.connect(estimatepage, [0, 'estimate size'])

compresspage = cli.add_list(
    [int, str],
    items = [
        "Keep",
        "Delete",
        "Delete after",
    ],
    bullet='%5d)',
    header=newline + "Do you want to delete the original files or keep them? File modification times will be preserved. If you choose 'Delete' then files will be deleted immediately after they are compressed. If you choose 'Delete after' then files will be deleted only after all files have been compressed." + newline + newline + "Choose an option" + newline,
    back=mainmenu,
)



keeppage = cli.add_page(
    [],
    lambda simulation=simulation: compress(simulation, delete=False, delete_after=False),
    _quit = False,
    header=newline,
)
compresspage.connect(keeppage, [0, 'Keep'])

deletepage = cli.add_page(
    [],
    lambda simulation=simulation: compress(simulation, delete=True, delete_after=False),
    _quit = False,
    header=newline,
)
compresspage.connect(deletepage, [1, 'Delete'])

deleteafterpage = cli.add_page(
    [],
    lambda simulation=simulation: compress(simulation, delete=True, delete_after=True),
    _quit = False,
    header=newline,
)
compresspage.connect(deleteafterpage, [2, 'Delete after'])


decompresspage = cli.add_page(
    [],
    lambda simulation=simulation: decompress(simulation),
    _quit=False,
    header=newline,
)

removeredundantpage = cli.add_page(
    [],
    delete_redundant,
    _quit=False,
    header=newline,
)
removeconfirmationpage = cli.add_confirmation_page(
    header = "Permanently delete files whose names and modification times match those in the compressed archive?" + newline,
    back = mainmenu,
)
removeconfirmationpage.connect_yes(removeredundantpage)



cli.set_mainmenu(mainmenu)
cli.run()
